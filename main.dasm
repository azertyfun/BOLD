; *************************
; Project: GRUB
; File: main.dasm
; *************************

#define NB_PROGRAMS 5 ;Change to your number of OS (max 5)

:start
	;First, we copy the loader at 0xE000.
	set A, loader
	set B, loader_end
	set C, 0xE000
	jsr memcpy

	jsr detectPeriphs ;Detecting peripherals
	
	set A, 0
	set B, 0x8000
	hwi [monitor] ;Mapping monitor
	
	set A, 3
	set B, 0x0
	hwi [monitor] ;Setting border color
	
	set B, GUI
	set I, 0x8000
	jsr write

	set [selected], 0
	
:mainLoop
	
	;Printing programs with one highlighted
	
	set C, ptr_names
	set I, 0x80A1
	set J, 0
	:writeNames
		set B, [C]
		ife J, [selected] ;if selected, printing highlight
			set Z, 0xABAB
		jsr write
		set Z, 0
		add I, 0x20
		add C, 1
		add J, 1
		ifn J, NB_PROGRAMS
			set PC, writeNames
	
	set A, 0
	hwi [keyboard] ;Clears keyboard buffer
		
	;Waiting for user to type a letter
	set A, 1
	:waitKey_loop
	hwi [keyboard]
	ife C, 0
		set PC, waitKey_loop
	
	jsr handleKey
	
	set [0xFF88], [selected]
	
	ife Z, 0
		set PC, mainLoop
	set PC, load


:handleKey
	set Z, 0
	ifn C, 0x72
		ifn C, 0x66
			ifn C, 0x11
				set PC, POP
	
	ife C, 0x72 ;ARROW_UP
		set PC, handleKey_up
	ife C, 0x11 ;RETURN
		set PC, handleKey_return
	
	;Don't need to test down, if not up and not enter -> down -> continue in code ^^
	
	:handleKey_down
		add [selected], 1
		ife [selected], NB_PROGRAMS
			set [selected], 0
		set PC, POP
	
	:handleKey_up
		sub [selected], 1
		ife [selected], -1
			set [selected], NB_PROGRAMS
		ife [selected], NB_PROGRAMS
			sub [selected], 1
		set PC, POP ;Back to main loop
	
	:handleKey_return
		set Z, 1 ;We want to launch then ^^
		set PC, POP

:load
	set B, str_loading
	set I, 0x8160
	jsr write
	
	set I, 0
	
	set A, [selected]
	set Y, ptr_programs
	add Y, A
	set Y, [Y]

	set Z, ptr_endPrograms
	add Z, A
	set Z, [Z]
		
	set PC, 0xE000
	
	
:loader
	:loader_loop0
		sti [I], [Y]
		add Y, 1
		ifn Y, Z
			set PC, 0xE000 ;Let's go back to the loop (can't use loader_loop0 because the address changes while copying lodaer)
	;Clearing RAM until reaching this
	:loader_loop1
		set [Z], 0
		add Z, 1
		ifn Z, grub_end
			sub PC, 4 ;Let's go back to loader_loop1
	
	set A, 0
	set B, 0
	set C, 0
	set X, 0
	set Y, 0
	set Z, 0
	set I, 0
	set J, 0
	set EX, 0
	
	set PC, 0
:loader_end

:str_loading DAT "Loading program.                ", 0

:GUI
DAT 0x1F, 0x1B, 0x1C, 0x20, 0x1c, 0x1b, 0x1c, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1b, 0x1C, "  2013 azertyfun"
DAT 0x1F, 0x1C, 0x1b, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, "                "
DAT 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, "                "
DAT 0x1F, 0x1C, 0x1b, 0x20, 0x1b, 0x1C, 0x1B, 0x20, 0x1F, 0x1C, 0x1C, 0x20, 0x20, 0x1F, 0x1C, 0x1B, "                "
DAT 0x09, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x0C, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0B
DAT "ENTER: Start | R/F: Select OS   ", 0

:selected DAT 0
