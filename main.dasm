; *************************
; Project: GRUB
; File: main.dasm
; *************************

#define NB_PROGRAMS 5 ;Change to your number of OS (max 5)

:start
	;First, we copy the loader at 0xE000.
	set A, loader
	set B, loader_end
	set C, 0xE000
	jsr memcpy

	jsr detectPeriphs ;Detecting peripherals
	
	set A, 0
	set B, 0x8000
	hwi [monitor] ;Mapping monitor
	
	set A, 3
	set B, 0x0
	hwi [monitor] ;Setting border color
	
	set B, GUI
	set I, 0x8000
	jsr write

	set [selected], 0
	
:mainLoop
	
	;Printing programs with one highlighted
	
	set C, ptr_names
	set I, 0x80A1
	set J, 0
	:writeNames
		set B, [C]
		ife J, [selected] ;if selected, printing highlight
			set Z, 0xABAB
		jsr write
		set Z, 0
		add I, 0x20
		add C, 1
		add J, 1
		ifn J, NB_PROGRAMS
			set PC, writeNames
	
	set A, 0
	hwi [keyboard] ;Clears keyboard buffer
		
	;Waiting for user to type a letter
	set A, 1
	:waitKey_loop
	hwi [keyboard]
	ife C, 0
		set PC, waitKey_loop
	
	jsr handleKey
	
	set [0xFF88], [selected]
	
	ife Z, 1
		set PC, load
	ife Z, 2
		set PC, loadFloppy
		
	set PC, mainLoop


:handleKey
	set Z, 0
	ifn C, 0x72 ;KEY_R
		ifn C, 0x66 ;KEY_F
			ifn C, 0x11 ;KEY_RETURN
				ifn C, 0x67 ;KEY_G
					set PC, POP
	
	ife C, 0x72 ;KEY_R
		set PC, handleKey_up
	ife C, 0x11 ;RETURN
		set PC, handleKey_return
	ife C, 0x67 ;KEY_G
		set PC, handleKey_key_G
	
	;If not R, return or G, must be down, don't need to test.
	
	:handleKey_down
		add [selected], 1
		ife [selected], NB_PROGRAMS
			set [selected], 0
		set PC, POP
	
	:handleKey_up
		sub [selected], 1
		ife [selected], -1
			set [selected], NB_PROGRAMS
		ife [selected], NB_PROGRAMS
			sub [selected], 1
		set PC, POP ;Back to main loop
	
	:handleKey_return
		set Z, 1 ;We want to launch then ^^
		set PC, POP

	:handleKey_key_G
		set Z, 2 ;We want to boot from a floppy then
		set PC, POP

:GUI
DAT 0x1F, 0x1B, 0x1C, 0x20, 0x1c, 0x1b, 0x1c, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x1b, 0x1C, "  2013 azertyfun"
DAT 0x1F, 0x1C, 0x1b, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, "                "
DAT 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x1F, 0x20, 0x1F, "                "
DAT 0x1F, 0x1C, 0x1b, 0x20, 0x1b, 0x1C, 0x1B, 0x20, 0x1F, 0x1C, 0x1C, 0x20, 0x20, 0x1F, 0x1C, 0x1B, "                "
DAT 0x09, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0A
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x08, "                              ", 0x08
DAT 0x0C, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0B
DAT "G: Boot from floppy|R/F: select ", 0

:selected DAT 0
